using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace QBits.Intuition.Mathematics.Primes
{
    /// <summary>
    /// Manages prime numbers management
    /// </summary>
    public class PrimeSolver
    {
        SortedSet<long> knownPrimes = new SortedSet<long>();

        /// <summary>
        /// Tests if a given number is a prime. If so, true is returned.
        /// Note: This operation can take a long time if the number has not been cached yet.
        /// </summary>
        /// <param name="testedInteger"></param>
        /// <returns>True for primes. False otherwise.</returns>
        public bool IsPrime(long testedInteger)
        {
            #region Sanity checks
            if (testedInteger < 2) return false;
            #endregion

            #region Check cache
            if (knownPrimes.Contains(testedInteger)) return true;
            #endregion

            MakeTest(testedInteger);
            if (knownPrimes.Contains(testedInteger)) return true;

            return false;
        }

        /// <summary>
        /// Tests using this simple trial method: http://www.wikihow.com/Check-if-a-Number-Is-Prime
        /// </summary>
        /// <param name="testedInteger">Number tested for primality.</param>
        private void MakeTest(long testedInteger)
        {
            #region Divide n by 2. If the result is an integer, then n is not prime because 2 is a factor of n. Look at the last digit and if it's an even number, it's divisible by 2. If not, continue.
            if (IsInteger(testedInteger, 2)) return;
            if (IsInteger(testedInteger, 4)) return;
            #endregion

            #region The brute-force test until sqrt(a)
            long maxDivisor = (long)Math.Sqrt(testedInteger);

            for (long i = 3; i <= maxDivisor; i++)
            {
                if (IsInteger(testedInteger, i)) return;
            }
            #endregion

            //Now we are pretty sure the number is a prime. Add it to the known set of cached primes.
            knownPrimes.Add(testedInteger);

        }

        /// <summary>
        /// Returns true if result of division of <paramref name="testedInteger"/> and <paramref name="divisor"/> is an integer. False otherwise.
        /// </summary>
        /// <param name="testedInteger"></param>
        /// <param name="divisor"></param>
        /// <returns></returns>
        private bool IsInteger(long testedInteger, long divisor)
        {
            var b = testedInteger / divisor;
            var c = b * divisor;
            return c == testedInteger;
        }
    }
}
